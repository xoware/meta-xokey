#!/bin/busybox sh
#
#  XoWare Init for initramfs
#  Goals here:
#  1.   Detect if update image is available, and if so, apply it before mounting flash filesystems
#  2.   mount root fs  on flash or nfs (development)
#  3.   Continue bootprocess calling switch_root 


# msg functions arguments
# $1 string
# $2 hide flag

good_msg() {	
	msg_string=$1
	msg_string="${msg_string:-...}"
	[ "$2" != 1 ] && echo -e "${GOOD}>>${NORMAL}${BOLD} ${msg_string} ${NORMAL}"
}

bad_msg() {
	msg_string=$1
	msg_string="${msg_string:-...}"
	if [ "$2" != 1 ]
	then
		echo -e "${BAD}!!${NORMAL}${BOLD} ${msg_string} ${NORMAL}"
	fi
} 

warn_msg() {
	msg_string=$1
	msg_string="${msg_string:-...}"
	[ "$2" != 1 ] && echo -e "${WARN}**${NORMAL}${BOLD} ${msg_string} ${NORMAL}"
}

rescue_shell() {
    echo "bbinstall"
    /bin/busybox --install -s
    echo "Dropping you to a rescue shell."
    exec /bin/sh
    # 1. make ourself session leader,
    # 2. open /dev/tty1 and thus acquire a ctty,
    # 3. re-execute the shell, allowing it to notice that it has a ctty:
    exec setsid sh -c 'exec sh </dev/tty1 >/dev/tty1 2>&1'
}

setup_usb_eth () {
	echo "setup_usb_eth"
	modprobe atmel_usba_udc
	modprobe g_ether
	ip link set usb0 up
#NOTE could take out udhcpc if we always use static and save 2 secs
	udhcpc -i usb0 -b
	ip addr add 192.168.255.1/30 brd 192.168.255.3 dev usb0
}

remote_rescue_shell() {
    setup_usb_eth

    echo "Setting IP 10.64.1.8 up"
    # Bring up network interface
    ifconfig eth0 10.64.1.8 up

    # telnetd requires devpts
    mkdir -p /dev/pts
    mount -t devpts none /dev/pts
    echo "Start telnet server"
    # Start the telnet server
    telnetd -l /bin/sh

    # Continue with the local rescue shell
    rescue_shell
}

mount_real_root () {
	echo "Start real root ${REAL_ROOT} "
	cat /proc/mounts
	# Clean up.
	umount /proc
	umount /sys

	# Boot the real thing.
	exec switch_root ${REAL_ROOT} /sbin/init

}

check_nfsmount() {

	if grep 'nfsroot=' /proc/cmdline > /dev/null 2>&1; then
		echo "NFS specified in cmd line"
	else
		return
	fi

	# Obtain NFSIP	
	OPTIONS=`cat /proc/cmdline"`
	for OPTION in $OPTIONS
	do
		if [ `echo $OPTION | sed -e "s/=/ /g" | cut -d " " -f 1` = 'nfsroot' ]
		then
			echo "NFSOPT = ${OPTION}"
			NFSIP=`echo $OPTION | sed -e 's/:/=/' |cut -d= -f2`
			NFSPATH=`echo $OPTION | sed -e 's/:/=/' |cut -d= -f3`
		fi 
	done

	# Setup NFSROOT
	if [ "${NFSIP}" != '' ] && [ "$NFSPATH" != '' ]
	then
		NFSROOT="${NFSIP}:${NFSPATH}"
	else
		bad_msg "Please check your paramaters nfsroot=<...> parameter."
	fi

	if [ "${NFSROOT}" != '' ]
	then

		NFSOPTIONS="ro,nfsvers=2,nolock"

		good_msg "Attempting to mount NFS root on ${NFSROOT} with options ${NFSOPTIONS}"
		mkdir -p /mnt/nfs
		mount -t nfs -o ${NFSOPTIONS} ${NFSROOT} /mnt/nfs
		if [ "$?" = '0' ]
		then
			REAL_ROOT="/mnt/nfs"
			mount_real_root
		else
			bad_msg "NFS Mounting failed. Is the path correct ?"
			remote_rescue_shell
		fi
	fi
	
}
check_fw_upgrade () {
	if grep '"new_rootfs"' /proc/mtd > /dev/null 2>&1; then
		echo "new_rootfs found"
		ROOTFS_MTD=`grep '"new_rootfs"' /proc/mtd |cut -d ':' -f1 |sed -e 's/mtd//'`
		xosigcheck  -f /dev/mtd${ROOTFS_MTD}
		if [ "$?" = '0' ]
		then
			ubirmvol /dev/ubi0  -N old_rootfs > /dev/null 2>&1
			ubirename /dev/ubi0 rootfs old_rootfs new_rootfs rootfs
			ubirmvol /dev/ubi0  -N old_rootfs > /dev/null 2>&1
		else 
			bad_msg "SIGNATURE FAIL MTD $ROOTFS_MTD failed."
			echo "/proc/mounts:"
			cat /proc/mounts
			echo "/proc/mtd:"
			cat /proc/mtd
			echo "/dev:"
			ubinfo -a
			ls -la /dev
			hexdump -n 64 -C $ROOTFS_MTD
			mkdir -p /dev/pts
			mount -t devpts none /dev/pts

			check_tftp_upgrade
			rescue_shell
			exit
		fi

		
		
		mount -t squashfs /dev/mtdblock${ROOTFS_MTD}  /mnt/root/
		if [ "$?" = '0' ]
		then
			REAL_ROOT="/mnt/root"
			mount_real_root
		fi
	fi
}

tftp_rootfs() {
	local count=19
	while [ ${count} -gt 0 ]
	do 
		count=$((count-1))
		tftp -g -r ek_rootfs.squashfs  192.168.255.2
		if [ "$?" = '0' ]
		then
			break
		fi
		echo "retries left ${count}"
		sleep 3
	done
}

rm_old_ubi_vols() {
	nvols=`ubinfo -a |grep 'Volumes count' |cut -d: -f2`
	echo "n_ubi_vols=${nvols}"
	#trim leading whiespace
	nvols=`expr "$nvols" : "\ *\(.*[^ ]\)\ *$"`
	echo "n_ubi_vols=${nvols}"
	if [ $nvols -gt 0  ]
	then
		ubirmvol /dev/ubi0 -n 2
		ubirmvol /dev/ubi0 -n 1
		ubirmvol /dev/ubi0 -n 0
	fi
}



check_tftp_upgrade () {
	setup_usb_eth
	mount -t tmpfs -osize=32M tmpfs /tmp/
	cd /tmp
	rm_old_ubi_vols
	tftp_rootfs
	ubimkvol /dev/ubi0 -s 20MiB -N rootfs
	ubimkvol_ret=$?
	echo "ubimkvol returned=${ubimkvol_ret}"
	if [ $ubimkvol_ret -ne 0  ]
	then
		ubiformat /dev/mtd7 -y
		ubiattach /dev/ubi_ctrl  -m 7
		echo "ubiattach returned $?"
		ubimkvol /dev/ubi0 -s 28MiB -N rootfs
		ubimkvol_ret=$?
		echo "ubimkvol returned=${ubimkvol_ret}"
	fi
	
	ubiupdatevol /dev/ubi0_0 /tmp/ek_rootfs.squashfs
	ubiupdatevol_ret=$?
	echo "ubiupdatevol returned=${ubiupdatevol_ret}"
	
	ubinfo -a

}

mount_rootfs_squashfs_ubi () {
	echo "checking squash rootfs"
	if grep '"rootfs"' /proc/mtd > /dev/null 2>&1; then
		echo "rootfs found"
		ROOTFS_MTD=`grep '"rootfs"' /proc/mtd |cut -d ':' -f1 |sed -e 's/mtd//'`
		mount -t squashfs /dev/mtdblock${ROOTFS_MTD}  /mnt/root/
		if [ "$?" = '0' ]
		then
			xosigcheck  -f /dev/mtd${ROOTFS_MTD}
			if [ "$?" = '0' ]
			then
				REAL_ROOT="/mnt/root"
				mount_real_root
			else 
				bad_msg "SIGNATURE FAIL MTD $ROOTFS_MTD failed."
				echo "/proc/mounts:"
				cat /proc/mounts
				echo "/proc/mtd:"
				cat /proc/mtd
				echo "/dev:"
				ubinfo -a
				ls -la /dev
				hexdump -n 64 -C $ROOTFS_MTD
				mkdir -p /dev/pts
				mount -t devpts none /dev/pts

				check_tftp_upgrade
				rescue_shell
			fi
		else 
			bad_msg "Flash Mounting MTD $ROOTFS_MTD failed."
			echo "/proc/mounts:"
			cat /proc/mounts
			echo "/proc/mtd:"
			cat /proc/mtd
			echo "/dev:"
			ubinfo -a
			ls -la /dev
			hexdump -n 64 -C $ROOTFS_MTD
			mkdir -p /dev/pts
			mount -t devpts none /dev/pts

			check_tftp_upgrade
			#remote_rescue_shell
			rescue_shell
		fi
	else
		echo "no rootfs detected"
		check_tftp_upgrade
		rescue_shell
	fi
}

## Main Startup
# Mount the /proc and /sys filesystems.
mkdir -p /proc /sys /mnt/new /mnt/root
mount -t proc proc /proc
mount -t sysfs sysfs /sys
echo /sbin/mdev > /proc/sys/kernel/hotplug
mdev -s


#mount -o ro /dev/md1 /mnt/root || rescue_shell

if grep 'rescue=1' /proc/cmdline > /dev/null 2>&1; then
	echo "rescue in cmd line"
	remote_rescue_shell
fi

check_fw_upgrade
check_nfsmount
mount_rootfs_squashfs_ubi

echo "REAL_ROOT=${REAL_ROOT}"

remote_rescue_shell

