META for exokey bitbake open-embedded overlay

---
Build procedure:

1. Clone yocto/poky git repository
git clone git://git.yoctoproject.org/poky

2. Checkout dylan-9.0.1 tag
cd poky
git checkout dylan-9.0.1 -b my_branch

3. Clone meta-atmel layer
git clone http://github.com/linux4sam/meta-atmel

4.  Clone meta-exokey layer
git clone git@github.com:xoware/meta-xokey.git

5. Initialize build directory
source oe-init-build-env


6. Add meta-atmel, meta-exokey layers to bblayer configuration file
vim conf/bblayers.conf:

# LAYER_CONF_VERSION is increased each time build/conf/bblayers.conf
# changes incompatibly
LCONF_VERSION = "6"

BBPATH = "${TOPDIR}"
BBFILES ?= ""

BBLAYERS ?= " \
  /home/karl/workspace/meta-exokey \
  /home/karl/workspace/meta-atmel \
  /home/karl/workspace/meta \
  /home/karl/workspace/meta-yocto \
  /home/karl/workspace/meta-yocto-bsp \
  "
7. Edit local.conf to specify the machine, location of source archived, package type (rpm, deb or ipk)
vim conf/local.conf:
[...]
MACHINE ??= "exokey"
[...]
DL_DIR ?= "your_download_directory_path"
[...]
PACKAGE_CLASSES ?= "package_ipk package_tar"

8. Build exokey image
bitbake -v exokey-image

  This will build and produce output in build/tmp/deploy/images:
  A) firmware image in build/tmp/deploy/images/firmware*.img   This is the image used in the UI
  This currently contains the Kernel and UBI squashfs/rootfs  volume.   At a later date we may decide to include  uboot or DTB files in this firmware image

  B) uImage Kernel image including initramfs   This can be programmed in uboot console with nand write, or linux console with nandwrite command

  C) *.DTB   Device tree binary.  Used by linux kernel to detect hardware.   Need only be programmed once at factory unless we change something.
  DTB can be programmed via U-Boot directly to NAND or on linux console with nandwrite
  Currently this is on the mtd4 partion at 0x180000

  D) rootfs.squashfs.ubi :  this is the rootfs squashfs volume inside a UBI image.  This can be programmed via U-Boot directly to NAND

