META for exokey bitbake open-embedded overlay

---
Build procedure:

1. Clone yocto/poky git repository
git clone git://git.yoctoproject.org/poky


2 Checkout dora (12.X) branch 
cd poky && git checkout dizzy -b my_branch

Skip step 3
#3. Clone meta-atmel layer
#git clone http://github.com/linux4sam/meta-atmel
#cd meta-atmel && git checkout a4a3976f5262e343cf83c07786d1cfc8e75398d0 && cd ..

4.  Clone meta-exokey layer
git clone git@github.com:xoware/meta-xokey.git

5. Initialize build directory
source oe-init-build-env build_ek


6. Add  meta-exokey layer to bblayer configuration file
vim conf/bblayers.conf

# LAYER_CONF_VERSION is increased each time build/conf/bblayers.conf
# changes incompatibly
LCONF_VERSION = "6"

BBPATH = "${TOPDIR}"
BBFILES ?= ""

BBLAYERS ?= " \
  /home/karl/workspace/meta-xokey \
  /home/karl/workspace/meta \
  /home/karl/workspace/meta-yocto \
  /home/karl/workspace/meta-yocto-bsp \
  "
7. Edit local.conf to specify the machine, location of source archived, package type (rpm, deb or ipk)
vim conf/local.conf

[...]
MACHINE ??= "exokey"
[...]
DL_DIR ?= "your_download_directory_path"
[...]
PACKAGE_CLASSES ?= "package_ipk"

DISTRO_FEATURES_append += " pam"
INITRAMFS_IMAGE = "exokey-initramfs"
INITRAMFS_IMAGE_BUNDLE = "1"
FILESYSTEM_PERMS_TABLES = "files/fs-perms.txt"


Optional to build faster:
set BB_NUMBER_THREADS, PARALLEL_MAKE as you like for your PC



8. Build exokey image
bitbake -v exokey-image


  This will build and produce output in build/tmp/deploy/images:
  A) firmware image in build/tmp/deploy/images/EK_firmware*.img   This is the image used in the UI
  This currently contains the Kernel and UBI squashfs/rootfs  volume.   At a later date we may decide to include  uboot or DTB files in this firmware image

  B) uImage Kernel image including initramfs   This can be programmed in uboot console with nand write, or linux console with nandwrite command

  C) *.DTB   Device tree binary.  Used by linux kernel to detect hardware.   Need only be programmed once at factory unless we change something.
  DTB can be programmed via U-Boot directly to NAND or on linux console with nandwrite
  Currently this is on the mtd4 partion at 0x180000

  D) rootfs.squashfs.ubi :  this is the rootfs squashfs volume inside a UBI image.  This can be programmed via U-Boot directly to NAND




  9.  Set some uboot variables

	setenv bootargs 'console=ttyS0,115200 mtdparts=atmel_nand:256K(bs)ro,512K(ub)ro,256K(env)ro,512K(env_r)ro,512K(dtb),6M(ker),8M(cfg),-(store) root=/dev/ram0 ubi.mtd=7'
	setenv bootcmd 'nand read 0x21000000 0x00180000 0x00006000;nand read 0x22000000 0x00200000 0x600000;bootm 0x22000000 - 0x21000000'
	setenv ethaddr '00:36:65:ba:6f:be'
	setenv serial '20131127-123-456'


--
Appendix A:   NFS boot on eval board:

setenv bootargs 'console=ttyS0,115200 mtdparts=atmel_nand:256K(bs)ro,512K(ub)ro,256K(env)ro,512K(env_r)ro,512K(dtb),6M(ker),8M(cfg),-(store) root=/dev/ram0 ubi.mtd=7 root=/dev/nfs nfsroot=10.64.1.2:/rootfs ip=10.64.1.8:10.64.1.2::255.0.0.0: debug'
