diff --git a/arch/arm/boot/dts/at91sam9263ek.dts b/arch/arm/boot/dts/at91sam9263ek.dts
index 46deb88..9cf3952 100644
--- a/arch/arm/boot/dts/at91sam9263ek.dts
+++ b/arch/arm/boot/dts/at91sam9263ek.dts
@@ -47,7 +47,7 @@
 			};
 
 			usb1: gadget@fff78000 {
-				atmel,vbus-gpio = <&pioA 25 0>;
+/*				atmel,vbus-gpio = <&pioA 25 0>; */
 				status = "okay";
 			};
 
diff --git a/arch/arm/boot/dts/sama5d3.dtsi b/arch/arm/boot/dts/sama5d3.dtsi
index 4efc983..a921a56 100644
--- a/arch/arm/boot/dts/sama5d3.dtsi
+++ b/arch/arm/boot/dts/sama5d3.dtsi
@@ -347,7 +347,7 @@
 					trigger-value = <0x6>;
 				};
 			};
-
+/*
 			tsadcc: tsadcc@f8018000 {
 				compatible = "atmel,at91sam9x5-tsadcc";
 				reg = <0xf8018000 0x4000>;
@@ -359,7 +359,7 @@
 				atmel,ts_sample_hold_time = <0x0a>;
 				status = "disabled";
 			};
-
+*/
 			i2c2: i2c@f801c000 {
 				compatible = "atmel,at91sam9x5-i2c";
 				reg = <0xf801c000 0x4000>;
diff --git a/arch/arm/boot/dts/sama5d3mb.dtsi b/arch/arm/boot/dts/sama5d3mb.dtsi
index 8730531..624894b 100644
--- a/arch/arm/boot/dts/sama5d3mb.dtsi
+++ b/arch/arm/boot/dts/sama5d3mb.dtsi
@@ -115,10 +115,11 @@
 							<4 29 0x0 0x0>; /* PE29 gpio */
 					};
 
-					pinctrl_usba_vbus: usba_vbus {
-						atmel,pins =
-							<3 29 0x0 0x4>; /* PD29 GPIO with deglitch */
-					};
+/*					pinctrl_usba_vbus: usba_vbus { */
+/*						atmel,pins = */
+/*							<3 29 0x0 0x4>; */ /* PD29 GPIO with deglitch */
+/*					}; */
+
 				};
 			};
 
@@ -130,11 +131,10 @@
 				status = "okay";
 			};
 		};
-
 		usb0: gadget@00500000 {
-			atmel,vbus-gpio = <&pioD 29 0>;
+/*			atmel,vbus-gpio = <&pioD 29 0>;
 			pinctrl-names = "default";
-			pinctrl-0 = <&pinctrl_usba_vbus>;
+			pinctrl-0 = <&pinctrl_usba_vbus>; */
 			status = "okay";
 		};
 
diff --git a/drivers/usb/gadget/atmel_usba_udc.c b/drivers/usb/gadget/atmel_usba_udc.c
index 87db333..f77e114 100644
--- a/drivers/usb/gadget/atmel_usba_udc.c
+++ b/drivers/usb/gadget/atmel_usba_udc.c
@@ -322,8 +325,8 @@ static inline void usba_cleanup_debugfs(struct usba_udc *udc)
 
 static int vbus_is_present(struct usba_udc *udc)
 {
-	if (gpio_is_valid(udc->vbus_pin))
-		return gpio_get_value(udc->vbus_pin) ^ udc->vbus_pin_inverted;
+// 	if (gpio_is_valid(udc->vbus_pin))
+// 		return gpio_get_value(udc->vbus_pin) ^ udc->vbus_pin_inverted;
 
 	/* No Vbus detection: Assume always present */
 	return 1;
@@ -1752,18 +1755,19 @@ static irqreturn_t usba_udc_irq(int irq, void *devid)
 	return IRQ_HANDLED;
 }
 
+/*
 static irqreturn_t usba_vbus_irq(int irq, void *devid)
 {
 	struct usba_udc *udc = devid;
 	int vbus;
 
-	/* debounce */
+	/* debounce *//*
 	udelay(10);
 
 	spin_lock(&udc->lock);
 
 	/* May happen if Vbus pin toggles during probe() */
-	if (!udc->driver)
+	/*if (!udc->driver)
 		goto out;
 
 	vbus = vbus_is_present(udc);
@@ -1791,7 +1795,7 @@ out:
 
 	return IRQ_HANDLED;
 }
-
+ */
 static int atmel_usba_start(struct usb_gadget *gadget,
 		struct usb_gadget_driver *driver)
 {
@@ -1811,8 +1815,12 @@ static int atmel_usba_start(struct usb_gadget *gadget,
 	DBG(DBG_GADGET, "registered driver `%s'\n", driver->driver.name);
 
 	udc->vbus_prev = 0;
-	if (gpio_is_valid(udc->vbus_pin))
-		enable_irq(gpio_to_irq(udc->vbus_pin));
+// 	if (gpio_is_valid(udc->vbus_pin)) {
+// 		DBG(DBG_GADGET, "Vbus pin valid enable IRQ\n");
+// 		enable_irq(gpio_to_irq(udc->vbus_pin));
+// 	} else {
+	  DBG(DBG_GADGET, "No VBUS pin, skip IRQ IRQ\n");
+// 	}
 
 	/* If Vbus is present, enable the controller and wait for reset */
 	spin_lock_irqsave(&udc->lock, flags);
@@ -1832,8 +1840,8 @@ static int atmel_usba_stop(struct usb_gadget *gadget,
 	struct usba_udc *udc = container_of(gadget, struct usba_udc, gadget);
 	unsigned long flags;
 
-	if (gpio_is_valid(udc->vbus_pin))
-		disable_irq(gpio_to_irq(udc->vbus_pin));
+// 	if (gpio_is_valid(udc->vbus_pin))
+// 		disable_irq(gpio_to_irq(udc->vbus_pin));
 
 	spin_lock_irqsave(&udc->lock, flags);
 	udc->gadget.speed = USB_SPEED_UNKNOWN;
@@ -1873,6 +1881,8 @@ static struct usba_ep *atmel_udc_of_init(struct platform_device *pdev,
 	udc->vbus_pin = of_get_named_gpio_flags(np, "atmel,vbus-gpio", 0,
 						&flags);
 	udc->vbus_pin_inverted = (flags & OF_GPIO_ACTIVE_LOW) ? 1 : 0;
+	
+	dev_info(&pdev->dev, "vbus_pin %d\n", udc->vbus_pin);
 	if (udc->vbus_pin) {
 		pinctrl = devm_pinctrl_get_select_default(&pdev->dev);
 		if (IS_ERR(pinctrl)) {
@@ -2074,34 +2084,36 @@ static int __init usba_udc_probe(struct platform_device *pdev)
 		goto err_request_irq;
 	}
 	udc->irq = irq;
-
+	dev_info(&pdev->dev, "UDC IRQ=%d\n", irq);
+	
 	ret = device_add(&udc->gadget.dev);
 	if (ret) {
 		dev_dbg(&pdev->dev, "Could not add gadget: %d\n", ret);
 		goto err_device_add;
 	}
 
-	if (gpio_is_valid(udc->vbus_pin)) {
-		if (!gpio_request(udc->vbus_pin, "atmel_usba_udc")) {
-
-			ret = request_irq(gpio_to_irq(udc->vbus_pin),
-					usba_vbus_irq, 0,
-					"atmel_usba_udc", udc);
-			if (ret) {
-				gpio_free(udc->vbus_pin);
-				udc->vbus_pin = -ENODEV;
-				dev_warn(&udc->pdev->dev,
-					 "failed to request vbus irq; "
-					 "assuming always on\n");
-			} else {
-				disable_irq(gpio_to_irq(udc->vbus_pin));
-			}
-		} else {
+// 	if (gpio_is_valid(udc->vbus_pin)) {
+// 		if (!gpio_request(udc->vbus_pin, "atmel_usba_udc")) {
+// 
+// 			ret = request_irq(gpio_to_irq(udc->vbus_pin),
+// 					usba_vbus_irq, 0,
+// 					"atmel_usba_udc", udc);
+// 			if (ret) {
+// 				gpio_free(udc->vbus_pin);
+// 				udc->vbus_pin = -ENODEV;
+// 				dev_warn(&udc->pdev->dev,
+// 					 "failed to request vbus irq; "
+// 					 "assuming always on\n");
+// 			} else {
+// 				disable_irq(gpio_to_irq(udc->vbus_pin));
+// 			}
+// 		} else {
 			/* gpio_request fail so use -EINVAL for gpio_is_valid */
 			udc->vbus_pin = -EINVAL;
-		}
-	}
+// 		}
+// 	}
 
+	dev_info(&pdev->dev, "Add Gadget UDC\n");
 	ret = usb_add_gadget_udc(&pdev->dev, &udc->gadget);
 	if (ret)
 		goto err_add_udc;
@@ -2110,13 +2122,14 @@ static int __init usba_udc_probe(struct platform_device *pdev)
 	for (i = 1; i < udc->num_ep; i++)
 		usba_ep_init_debugfs(udc, &usba_ep[i]);
 
+	dev_info(&pdev->dev, "Probe Finished\n");
 	return 0;
 
 err_add_udc:
-	if (gpio_is_valid(udc->vbus_pin)) {
-		free_irq(gpio_to_irq(udc->vbus_pin), udc);
-		gpio_free(udc->vbus_pin);
-	}
+// 	if (gpio_is_valid(udc->vbus_pin)) {
+// 		free_irq(gpio_to_irq(udc->vbus_pin), udc);
+// 		gpio_free(udc->vbus_pin);
+// 	}
 
 	device_unregister(&udc->gadget.dev);
 
@@ -2151,10 +2164,10 @@ static int __exit usba_udc_remove(struct platform_device *pdev)
 		usba_ep_cleanup_debugfs(&usba_ep[i]);
 	usba_cleanup_debugfs(udc);
 
-	if (gpio_is_valid(udc->vbus_pin)) {
-		free_irq(gpio_to_irq(udc->vbus_pin), udc);
-		gpio_free(udc->vbus_pin);
-	}
+// 	if (gpio_is_valid(udc->vbus_pin)) {
+// 		free_irq(gpio_to_irq(udc->vbus_pin), udc);
+// 		gpio_free(udc->vbus_pin);
+// 	}
 
 	free_irq(udc->irq, udc);
 	kfree(usba_ep);
